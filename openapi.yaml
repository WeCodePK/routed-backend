
openapi: 3.0.4

info:
  version: "v0"
  title: Routed API

servers:
  - url: https://routed-backend.wckd.pk/api/v0

paths:
  /auth/admin/login:
    post:
      tags: [Auth]
      summary: Login and return a JWT.
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
 
      responses:
        200:
          description: Logged in successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      jwt:
                        type: string
              example:
                success: true
                message: Logged in successfully.
                data:
                  jwt: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFsaTEyMyIsIn ...

        400:
          description: Missing or malformed input.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
              example:
                success: false
                message: Username or password is missing.

        401:
          description: Invalid username or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
              example:
                success: false
                message: "Invalid username or password."

                      
  
  /auth/admin/forgot:
    post:
      tags: [Auth]
      summary: Initiate a forgot password request.
      requestBody:
        required: true
        content:
          'application/json':
              schema:
                type: object
                properties:
                  email:
                    type: string
                required:
                  - email
      responses:
        '200':
          description: If the user exists, a password reset email has been sent out.
  
  /auth/admin/reset/{token}:
    post:
      tags: [Auth]
      summary: Reset the admins password using a reset token.

  /auth/admin/change:
    post:
      tags: [Auth]



  /routes:
    get:
      tags: [Routes]
      summary: Get all routes (scoped).
      responses:
        '200':
          description: List of all routes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Route'
    post:
      tags: [Routes]
      summary: Create a new route (admins only).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      responses:
        '201':
          description: Route created

  /routes/{uuid}:
    get:
      summary: Get route by ID (scoped).
      tags: [Routes]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Route details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
    put:
      summary: Update a route
      tags: [Routes]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      responses:
        '200':
          description: Route updated

    delete:
      summary: Delete a route
      tags: [Routes]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Route deleted

  /assignments:
    post:
      summary: Assign a route to a driver
      tags: [Assign Route]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assignment'
      responses:
        '200':
          description: Assignment successful

  /drivers:
    get:
      summary: List all drivers
      tags: [Driver List]
      responses:
        '200':
          description: Driver list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Driver'
    post:
      summary: Add a new driver
      tags: [Driver List]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Driver'
      responses:
        '201':
          description: Driver created
    put:
      summary: Update an existing driver
      tags: [Driver List]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Driver'
      responses:
        '200':
          description: Driver updated
    delete:
      summary: Delete a driver
      tags: [Driver List]
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Driver deleted

  /tracking:
    get:
      summary: Get driver locations
      tags: [Driver Tracking]
      responses:
        '200':
          description: List of driver positions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tracking'

  /violations:
    get:
      summary: Get violation alerts
      tags: [Violation Alerts]
      responses:
        '200':
          description: List of violations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Violation'

  /admin/profile:
    get:
      summary: Get admin profile
      tags: [Profile Setting]
      responses:
        '200':
          description: Admin profile details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminProfile'
    put:
      summary: Update admin profile
      tags: [Profile Setting]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminProfile'
      responses:
        '200':
          description: Profile updated

components:
  schemas:
    Route:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        points:
          type: array
          items:
            type: object
            properties:
              lat:
                type: number
              lng:
                type: number

    Assignment:
      type: object
      properties:
        driverId:
          type: string
        routeId:
          type: string

    Driver:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        status:
          type: string
          enum: [active, offline, on-route]

    Tracking:
      type: object
      properties:
        driverId:
          type: string
        location:
          type: object
          properties:
            lat:
              type: number
            lng:
              type: number
        timestamp:
          type: string
          format: date-time

    Violation:
      type: object
      properties:
        id:
          type: string
        driverId:
          type: string
        routeId:
          type: string
        message:
          type: string
        time:
          type: string
          format: date-time

    AdminProfile:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
